In this chapter regular expressions are introduced and explained.

NOTES : ¤ DEFINITION :  A regular expression is a type of object. It can be either constructed with the RegExp constructor or 
written as a literal value by enclosing a pattern in forward slash (/) characters.

	¤ Backslashes have diffenrents meaning when the second definition is used.

	¤ TESTING FOR MATCHES : console.log(/abc/.test("abcde"));

	¤ SETS OF CHARACTERS : Say we want to match any number. In a regular expression, putting a set of characters 
between square brackets makes that part of the expression match any of the characters between the brackets.
	console.log(/[0345678]/.test("in 1992"));
	// → true
	console.log(/[0-2]/.test("in 1992"));
	// → true

	¤ A number of common character groups have their own built-in shortcuts.
Digits are one of them: \d means the same thing as [0-9].	
	\d	Any digit character
	\w	An alphanumeric character (“word character”)
	\s	Any whitespace character (space, tab, newline, and similar)
	\D	A character that is not a digit
	\W	A nonalphanumeric character
	\S	A nonwhitespace character
	.	Any character except for newline

	¤ International characters : \w only considers Latin dictionary, for a more robust alternative use \p{}.

	¤ Repeating parts of a pattern : -When you put a plus sign (+) after something in a
regular expression, it indicates that the element may be repeated more than once. \d+\ ==> '123'
	-The star (*) has a similar meaning but also allows the pattern to match zero times.
	-A question mark (?) makes a part of a pattern optional, meaning it may occur zero 
times or one time. \u?\ (u may occur or not).
	-To indicate that a pattern should occur a precise number of times, use braces. Putting
{4} after an element, for example, requires it to occur exactly four times. It is also possible
to specify a range this way: {2,4} means the element must occur at least twice and at most four times.

	¤ Grouping subexpressions : To use an operator like * or + on more than one element at a time,
you must use parentheses.

	¤ Matches and groups : Regular expressions also have an exec (execute) method that will return
null if no match was found and return an object with information about the match otherwise.
	-If you want to use parentheses purely for grouping, without having them show up in the array
of matches, you can put ?: after the opening parenthesis.

	¤ The Date class : JavaScript has a Date obkect class.
	Timestamps are stored as the number of milliseconds since the start of 1970, in the UTC time zone.
This follows a convention set by “Unix time”, which was invented around that time. You can use negative numbers for
times before 1970. The getTime method on a date object returns this number. It is big, as you can imagine.

	¤ Boundaries and look-ahead : Look-ahead tests do something similar. They provide a pattern and will make 
the match fail if the input doesn’t match that pattern, but don’t actually move the match position forward.
They are written between (?= and ).

	¤ Choice patterns : We could write three regular expressions and test them in turn, but there is a nicer way.
The pipe character (|) denotes a choice between the pattern to its left and the pattern to its right.

	¤ The mechanics of matching : Conceptually, when you use exec or test, the regular expression engine looks for a 
match in your string by trying to match the expression first from the start of the string, then from the second 
character, and so on until it finds a match or reaches the end of the string. It’ll either return the first match
that can be found or fail to find any match at all.

	¤ The replace method : String values have a replace method that can be used to replace part of the string
with another string. The first argument can also be a regular expression, in which case the first match of the
regular expression is replaced. When a g option (for global) is added after the regular expression, all matches
in the string will be replaced, not just the first.

	¤ Greed : we say the repetition operators (+, *, ?, and {}) are greedy, meaning they match as much as they can
and backtrack from there. If you put a question mark after them (+?, *?, ??, {}?), they become nongreedy and start
by matching as little as possible, matching more only when the remaining pattern does not fit the smaller match.














Summary
Regular expressions are objects that represent patterns in strings. They use their own language to express these patterns.

/abc/	A sequence of characters
/[abc]/	Any character from a set of characters
/[^abc]/	Any character not in a set of characters
/[0-9]/	Any character in a range of characters
/x+/	One or more occurrences of the pattern x
/x+?/	One or more occurrences, nongreedy
/x*/	Zero or more occurrences
/x?/	Zero or one occurrence
/x{2,4}/	Two to four occurrences
/(abc)/	A group
/a|b|c/	Any one of several patterns
/\d/	Any digit character
/\w/	An alphanumeric character (“word character”)
/\s/	Any whitespace character
/./	Any character except newlines
/\p{L}/u	Any letter character
/^/	Start of input
/$/	End of input
/(?=a)/	A look-ahead test
A regular expression has a method test to test whether a given string matches it. It also has a method exec that, when a match is found, returns an array containing all matched groups. Such an array has an index property that indicates where the match started.

Strings have a match method to match them against a regular expression and a search method to search for one, returning only the starting position of the match. Their replace method can replace matches of a pattern with a replacement string or function.

Regular expressions can have options, which are written after the closing slash. The i option makes the match case insensitive. The g option makes the expression global, which, among other things, causes the replace method to replace all instances instead of just the first. The y option makes and expression sticky, which means that it will not search ahead and skip part of the string when looking for a match. The u option turns on Unicode mode, which enables \p syntax and fixes a number of problems around the handling of characters that take up two code units.

Regular expressions are a sharp tool with an awkward handle. They simplify some tasks tremendously but can quickly become unmanageable when applied to complex problems. Part of knowing how to use them is resisting the urge to try to shoehorn things into them that they cannot cleanly express.

