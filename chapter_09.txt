In this chapter regular expressions are introduced and explained.

NOTES : ¤ DEFINITION :  A regular expression is a type of object. It can be either constructed with the RegExp constructor or 
written as a literal value by enclosing a pattern in forward slash (/) characters.

	¤ Backslashes have diffenrents meaning when the second definition is used.

	¤ TESTING FOR MATCHES : console.log(/abc/.test("abcde"));

	¤ SETS OF CHARACTERS : Say we want to match any number. In a regular expression, putting a set of characters 
between square brackets makes that part of the expression match any of the characters between the brackets.
	console.log(/[0345678]/.test("in 1992"));
	// → true
	console.log(/[0-2]/.test("in 1992"));
	// → true

	¤ A number of common character groups have their own built-in shortcuts.
Digits are one of them: \d means the same thing as [0-9].	
	\d	Any digit character
	\w	An alphanumeric character (“word character”)
	\s	Any whitespace character (space, tab, newline, and similar)
	\D	A character that is not a digit
	\W	A nonalphanumeric character
	\S	A nonwhitespace character
	.	Any character except for newline

	¤ International characters : \w only considers Latin dictionary, for a more robust alternative use \p{}.

	¤ Repeating parts of a pattern : -When you put a plus sign (+) after something in a
regular expression, it indicates that the element may be repeated more than once. \d+\ ==> '123'
	-The star (*) has a similar meaning but also allows the pattern to match zero times.
	-A question mark (?) makes a part of a pattern optional, meaning it may occur zero 
times or one time. \u?\ (u may occur or not).
	-To indicate that a pattern should occur a precise number of times, use braces. Putting
{4} after an element, for example, requires it to occur exactly four times. It is also possible
to specify a range this way: {2,4} means the element must occur at least twice and at most four times.

	¤ Grouping subexpressions : To use an operator like * or + on more than one element at a time,
you must use parentheses.

	¤ Matches and groups : Regular expressions also have an exec (execute) method that will return
null if no match was found and return an object with information about the match otherwise.
	-If you want to use parentheses purely for grouping, without having them show up in the array
of matches, you can put ?: after the opening parenthesis.

